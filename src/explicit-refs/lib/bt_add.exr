
(* Add exercise 3  ~ Alice Agnoletto *)

let n_left = { data <= 12; left <= 0; right <= 0}    (* 0 in head signals null *)
in let n_right = { data <= 44; left <= 0; right <= 0}
in let n_root = { data <= 33; left <= n_left ; right <= n_right }
in let t1 = { root <= n_root ; length <= 3} 
in letrec add_help (nd) = proc (key) 
{
  if number?(nd)
  then nd
  else 
    if nd.data = key
    then 0
    else
      if nd.data >> key
      then 
        if number?(nd.left)
        then nd.left <= {data <= key; left <= 0; right <= 0}
        else ((add_help nd.left) key )
      else
        if number?(nd.right)
        then nd.right <= {data <= key; left <= 0; right <= 0}
        else ((add_help nd.right) key )
}
in let add_bt = proc (t) { (add_help t.root) }
in begin
     ((add_bt t1) 23);
     t1.length <= t1.length+1;
     debug(t1)		
   end
